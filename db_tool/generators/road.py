from .generator import Generator
from shared.models import Road

class RoadGenerator(Generator):
    def __init__(self):
        super().__init__()
        self.generates(Road)
        self.renames("highway", "type")
        self.renames("junction", "junction_type")
        self.renames("bicycle", "bicycle_allowed")
        self.renames("horse", "horse_allowed")
        self.renames("motor_vehicle", "motor_vehicle_allowed")
        self.renames("lanes:forward", "forward_lanes")
        self.renames("lanes:backward", "backward_lanes")
        self.renames("destination:lanes", "lane_destinations")
        self.renames("footway", "footway_type")
        self.renames("inline_skates", "inline_skates_allowed")
        self.renames("cycleway:left", "left_cycleway")
        self.renames("cycleway:right", "right_cycleway")
        self.renames("maxspeed:hgv", "maxspeed_hgv")
        self.replaces_property_value("maxspeed", "CZ:urban", "50")
        self.renames("maxspeed:forward", "maxspeed_forward")
        self.renames("proposed:bridge", "proposed_bridge")
        self.renames("maxspeed:backward", "maxspeed_backward")
        self.renames("oneway:bicycle", "bicycle_oneway")
        self.renames("vehicle", "vehicle_allowed")
        self.renames("dog", "dogs_allowed")
        self.renames("motorcycle", "motorcycle_allowed")
        self.renames("bridge:structure", "bridge_structure")
        self.renames("oneway:tram", "tram_oneway")
        self.renames("direction", "incline")
        self.renames("FIXME", "fixme")
        self.renames("destination:symbol", "destination_symbol")
        self.renames("railway:lanes:backward", "railway_lanes_backward")
        self.renames("railway:lanes:forward", "railway_lanes_forward")
        self.removes("mtb", True)
        self.renames("change:lanes:backward", "change_lanes_backward")
        self.renames("change:lanes:forward", "change_lanes_forward")
        self.renames("psv:lanes:backward", "psv_lanes_backward")
        self.renames("psv:lanes:forward", "psv_lanes_forward")
        self.renames("parking:lane:left", "parking_lane_left")
        self.renames("parking:lane:right", "parking_lane_right")
        self.renames("parking:lane:both", "parking_lane_both")
        self.renames("change:lanes", "change_lanes")
        self.renames("class:bicycle:mtb", "mtb_bicycle_class")
        self.renames("zone:traffic", "traffic_zone")
        self.renames("traffic:zone", "traffic_zone")
        self.renames("destination:backward", "backward_destination")
        self.renames("class:bicycle:mtb:technical", "technical_mtb_bicycle_class")
        self.renames("note:ref_name", "ref_name_note")
        self.renames("maxwidth:lanes", "lanes_maxwidth")
        self.renames("highway:category:pl", "pl_highway_category")
        self.renames("highway:class:pl", "pl_highway_class")
        self.renames("maxspeed:bus", "bus_maxspeed")
        self.renames("maxspeed:trailer", "trailer_maxspeed")
        self.renames("width:carriageway", "carriageway_width")
        self.renames("maxspeed:wet", "wet_maxspeed")
        self.renames("bridge:name", "bridge_name")
        self.renames("maxspeed:variable", "varialbe_maxspeed")
        self.renames("overtaking:bus", "bus_overtaking")
        self.renames("overtaking:hgv", "hgv_overtaking")
        self.renames("overtaking:trailer", "trailer_overtaking")
        
        self.removes("bad_source:old:uhul:ortofoto")
        self.renames("bus:lanes:backward", "bus_lanes_backward")
        self.renames("bus:lanes:forward", "bus_lanes_forward")
        self.renames("railway:lanes", "railway_lanes")
        self.renames("vehicle:lanes:backward", "vehicle_lanes_backward")
        self.renames("vehicle:lanes:forward", "vehicle_lanes_forward")
        self.renames("busway:right", "busway_right")
        self.renames("destination:colour:lanes", "destination_lanes_colours")
        self.renames("destination:forward", "forward_destination")
        self.renames("hgv:6.5t", "hgv_6_5t")
        self.renames("destination:int_ref:lanes", "destination_int_ref_lanes")
        self.renames("destination:ref:lanes", "destination_ref_lanes")
        self.renames("destination:symbol:lanes", "destination_symbol_lanes")
        self.renames("parking:condition:left", "left_parking_condition")
        self.renames("parking:condition:right", "right_parking_condition")
        self.renames("parking:lane:both:parallel", "parking_lane_both_parallel")
        self.renames("destination:int_ref", "destination_int_ref")
        self.renames("destination:ref", "destination_ref")
        self.renames("maxspeed:type", "maxspeed_type")
        self.renames("motor_vehicle:conditional", "motor_vehicle_conditional")
        self.renames("motor_vehicle:forward:conditional", "motor_vehicle_forward_conditional")
        self.renames("maxspeed:conditional", "maxspeed_conditional")
        self.renames("motor_vehicle:backward", "motor_vehicle_backward")
        self.renames("vehicle:forward", "vehicle_forward")
        self.renames("sidewalk:both:kerb", "both_sidewalk_kerb")
        self.renames("parking:lane:left:parallel", "parking_lane_left_parallel")
        self.renames("vehicle:forward:conditional", "vehicle_forward_conditional")
        self.renames("transit:lanes", "transit_lanes")
        self.renames("bicycle:lanes:forward", "bicycle_forward_lanes")
        self.renames("hour_off:hgv", "hgv_hour_off")
        self.renames("hour_on:hgv", "hgv_hour_on")
        self.renames("parking:lane:left:diagonal", "parking_lane_left_diagonal")
        self.renames("hgv:6.5", "hgv_6_5t")
        self.renames("ramp:wheelchair", "wheelchair_ramp")
        self.renames("maxheight:forward", "forward_maxheight")
        self.renames("bicycle:class:technical", "technical_bicycle_class")
        self.renames("survey:date", "survey_date")
        self.renames("abandoned:highway", "abandoned_highway")
        self.renames("note:ref_name", "ref_name_note")
        self.renames("hgv:6t", "hgv_6t")
        self.renames("bridge:ref", "bridge_ref")
        self.renames("hgv:maxspeed:conditional", "hgv_conditional_maxspeed")
        self.renames("destination:country", "destination_country")
        self.renames("note:access", "access_note")
        self.renames("footway:left.width", "left_footway_width")
        self.renames("maxspeed:forward:conditional", "forward_maxspeed_conditional")
        self.renames("hazmat:water", "hazmat_water")
        self.renames("hgv:12t", "hgv_12t")
        self.renames("hgv:3.5", "hgv_3_5t")
        self.renames("note:maxweight", "maxweight_note")
        self.renames("alt_name:de", "alt_name_de")
        self.renames("alt_name:en", "alt_name_en")
        
        self.removes("motorroad")
        self.removes("veh_ban_until")
        self.removes("vehicle:conditional")
        self.removes("history")
        self.removes("hgv:conditional")
        self.removes("construction")
        self.removes("mtb")
        self.removes_subtree("aerialway")
        self.removes_subtree("turn")
        self.removes_subtree("toll")
        self.removes_subtree("piste")
        self.removes_subtree("demolished")
        self.removes_subtree("maxweight")
        self.removes_subtree("colonnade")
        self.removes_subtree("access")
        self.removes_subtree("vehicle:backward")
        
        
    def _prepare_properties(self, entity_spec, props, record):
        if "access" in props and "@" in props["access"]: # We don't really need those finer details
            props["access"] = props["access"].split(" ")[0]
        if "incline" in props and props["incline"][0].isdigit():
            del props["incline"] # Think of a better way how to handle those
        return super()._prepare_properties(entity_spec, props, record)
    @staticmethod
    def accepts(props):
        return "highway" in props